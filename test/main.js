// Generated by CoffeeScript 1.6.3
(function() {
  define(['chai', 'backbone', 'dom-view'], function(_arg, Backbone, DomView) {
    var expect;
    expect = _arg.expect;
    return describe('DOMView', function() {
      var model;
      model = null;
      beforeEach(function() {
        return model = new Backbone.Model();
      });
      describe('class, prop, attr, style, html helpers', function() {
        it('should toggle class for model events', function() {
          var View, el, view;
          View = DomView.extend({
            template: {
              '': {
                "class": {
                  'cTest': 'test eventName'
                },
                prop: {
                  'pTest': 'test eventName'
                },
                attr: {
                  'aTest': 'test eventName'
                },
                style: {
                  'opacity': 'test eventName'
                },
                html: 'test eventName'
              }
            }
          });
          view = new View(model);
          el = view.$el;
          expect(el).not.to.have["class"]('aTest');
          expect(el).not.to.have.prop('pTest');
          expect(el).not.to.have.attr('aTest');
          expect(el).to.have.css('opacity', '1');
          expect(el).to.be.empty;
          model.trigger('test', 1);
          expect(el).to.have["class"]('cTest');
          expect(el).to.have.prop('pTest', 1);
          expect(el).to.have.attr('aTest', '1');
          expect(el).to.have.css('opacity', '1');
          expect(el).to.have.html('1');
          model.trigger('eventName', 0);
          expect(el).not.to.have["class"]('aTest');
          expect(el).to.have.prop('pTest', 0);
          expect(el).to.have.attr('aTest', '0');
          expect(el).to.have.css('opacity', '0');
          return expect(el).to.have.html('0');
        });
        it('should toggle class for model events with changed arg number |arg(1)', function() {
          var View, el, view;
          View = DomView.extend({
            template: {
              '': {
                "class": {
                  'cTest': 'test|arg(1) eventName|arg(2)'
                },
                prop: {
                  'pTest': 'test|arg(1) eventName|arg(2)'
                },
                attr: {
                  'aTest': 'test|arg(1) eventName|arg(2)'
                },
                style: {
                  'opacity': 'test|arg(1) eventName|arg(2)'
                },
                html: 'test|arg(1) eventName|arg(2)'
              }
            }
          });
          view = new View(model);
          el = view.$el;
          expect(el).not.to.have["class"]('aTest');
          expect(el).not.to.have.prop('pTest');
          expect(el).not.to.have.attr('aTest');
          expect(el).to.have.css('opacity', '1');
          expect(el).to.be.empty;
          model.trigger('test', false, 1);
          expect(el).to.have["class"]('cTest');
          expect(el).to.have.prop('pTest', 1);
          expect(el).to.have.attr('aTest', '1');
          expect(el).to.have.css('opacity', '1');
          expect(el).to.have.html('1');
          model.trigger('eventName', true, true, 0);
          expect(el).not.to.have["class"]('aTest');
          expect(el).to.have.prop('pTest', 0);
          expect(el).to.have.attr('aTest', '0');
          expect(el).to.have.css('opacity', '0');
          return expect(el).to.have.html('0');
        });
        it('should toggle class for model field @fieldName', function() {
          var View, el, view;
          View = DomView.extend({
            template: {
              '': {
                "class": {
                  'cTest': '@test'
                },
                prop: {
                  'pTest': '@test'
                },
                attr: {
                  'aTest': '@test'
                },
                style: {
                  'opacity': '@test'
                },
                html: '@test'
              }
            }
          });
          model.set('test', true);
          view = new View(model);
          el = view.$el;
          expect(el).to.have["class"]('cTest');
          expect(el).to.have.prop('pTest');
          expect(el).to.have.attr('aTest');
          expect(el).to.have.css('opacity');
          expect(el).to.have.html('true');
          model.set('test', 0);
          expect(el).not.to.have["class"]('aTest');
          expect(el).to.have.prop('pTest', 0);
          expect(el).to.have.attr('aTest', '0');
          expect(el).to.have.css('opacity', '0');
          expect(el).to.have.html('0');
          model.set('test', 1);
          expect(el).to.have["class"]('cTest');
          expect(el).to.have.prop('pTest', 1);
          expect(el).to.have.attr('aTest', '1');
          expect(el).to.have.css('opacity', '1');
          return expect(el).to.have.html('1');
        });
        it('should toggle class for view event #viewEvent', function() {
          var View, el, view;
          View = DomView.extend({
            template: {
              '': {
                "class": {
                  'cTest': '#test #eventName|arg(1)'
                },
                prop: {
                  'pTest': '#test #eventName|arg(1)'
                },
                attr: {
                  'aTest': '#test #eventName|arg(1)'
                },
                style: {
                  'opacity': '#test #eventName|arg(1)'
                },
                html: '#test #eventName|arg(1)'
              }
            }
          });
          view = new View;
          el = view.$el;
          expect(el).not.to.have["class"]('aTest');
          expect(el).not.to.have.prop('pTest');
          expect(el).not.to.have.attr('aTest');
          expect(el).to.have.css('opacity', '1');
          expect(el).to.be.empty;
          view.trigger('test', 1);
          expect(el).to.have["class"]('cTest');
          expect(el).to.have.prop('pTest', 1);
          expect(el).to.have.attr('aTest', '1');
          expect(el).to.have.css('opacity', '1');
          expect(el).to.have.html('1');
          view.trigger('eventName', true, 0);
          expect(el).not.to.have["class"]('aTest');
          expect(el).to.have.prop('pTest', 0);
          expect(el).to.have.attr('aTest', '0');
          expect(el).to.have.css('opacity', '0');
          return expect(el).to.have.html('0');
        });
        return it('should toggle class for function', function() {
          var View, el, view;
          View = DomView.extend({
            template: {
              '': {
                "class": {
                  'cTest': {
                    'test': function() {
                      return this.model.get('field');
                    }
                  }
                },
                prop: {
                  'pTest': {
                    'test': function() {
                      return this.model.get('field');
                    }
                  }
                },
                attr: {
                  'aTest': {
                    'test': function() {
                      return this.model.get('field');
                    }
                  }
                },
                style: {
                  'opacity': {
                    'test': function() {
                      return this.model.get('field');
                    }
                  }
                },
                html: {
                  'test': function() {
                    return this.model.get('field');
                  }
                }
              }
            }
          });
          view = new View(model);
          el = view.$el;
          expect(el).not.to.have["class"]('aTest');
          expect(el).not.to.have.prop('pTest');
          expect(el).not.to.have.attr('aTest');
          expect(el).to.have.css('opacity', '1');
          expect(el).to.be.empty;
          model.set('field', 1);
          model.trigger('test');
          expect(el).to.have["class"]('cTest');
          expect(el).to.have.prop('pTest', 1);
          expect(el).to.have.attr('aTest', '1');
          expect(el).to.have.css('opacity', '1');
          expect(el).to.have.html('1');
          model.set('field', '');
          model.trigger('test');
          expect(el).not.to.have["class"]('aTest');
          expect(el).to.have.prop('pTest', '');
          expect(el).to.have.attr('aTest', '');
          expect(el).to.have.css('opacity', '1');
          return expect(el).to.be.empty;
        });
      });
      describe('on helper', function() {
        return it('should run function on dom event', function(done) {
          var View, view;
          View = DomView.extend({
            template: {
              '': {
                on: {
                  'click': function() {
                    expect(this).to.be.instanceOf(View);
                    return done();
                  }
                }
              }
            }
          });
          view = new View(model);
          return view.$el.click();
        });
      });
      describe('connect helper', function() {
        return it('should bind prop and field', function() {
          var View, el, view;
          View = DomView.extend({
            template: {
              '': {
                connect: {
                  'id|click': 'id'
                }
              }
            }
          });
          model.set('id', 'test');
          view = new View(model);
          el = view.$el;
          expect(el).to.have.prop('id', 'test');
          el.prop('id', 'max');
          el.click();
          expect(model.get('id')).to.be.equal('max');
          model.set('id', 'bob');
          return expect(el).to.have.prop('id', 'bob');
        });
      });
      return describe('each helper', function() {
        it('should create view for each item in collection', function() {
          var ListView, View, el, list, listView;
          View = DomView.extend({
            tagName: 'li',
            template: {
              '': {
                html: '@name'
              }
            }
          });
          ListView = DomView.extend({
            tagName: 'ul',
            template: {
              '': {
                each: {
                  view: View
                }
              }
            }
          });
          list = new Backbone.Collection([
            {
              name: 'Jack'
            }, {
              name: 'Bob'
            }
          ]);
          listView = new ListView(list);
          el = listView.$el;
          expect(el.find('li')).to.be.of.length(2);
          list.add({
            name: 'Max'
          });
          expect(el.find('li')).to.be.of.length(3);
          list.at(1).remove();
          return expect(el).to.have.text('JackMax');
        });
        return it('should run custom insertion/remove function', function() {
          var ListView, View, el, list, listView;
          View = DomView.extend({
            tagName: 'li',
            template: {
              '': {
                html: '@name'
              }
            }
          });
          ListView = DomView.extend({
            tagName: 'ul',
            template: {
              '': {
                each: {
                  view: View,
                  addHandler: function(ul, li, item) {
                    expect(this).to.be.instanceOf(ListView);
                    expect(item).to.be.instanceOf(Backbone.Model);
                    return ul.prepend(li);
                  },
                  delHandler: function(ul, li, item) {
                    expect(this).to.be.instanceOf(ListView);
                    return expect(item).to.be.instanceOf(Backbone.Model);
                  }
                }
              }
            }
          });
          list = new Backbone.Collection([
            {
              name: 'Jack'
            }, {
              name: 'Bob'
            }
          ]);
          listView = new ListView(list);
          el = listView.$el;
          expect(el).to.have.text('BobJack');
          list.at(0).remove();
          return expect(el).to.have.text('Max');
        });
      });
    });
  });

}).call(this);
